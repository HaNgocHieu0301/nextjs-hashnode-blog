import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import { useTranslation } from 'next-i18next';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { Waypoint } from 'react-waypoint';
import { Container } from '../components/container';
import { useAppContext } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Header } from '../components/header';
import { HeroPost } from '../components/hero-post';
import { ArticleSVG } from '../components/icons';
import { Layout } from '../components/layout';
import { MorePosts } from '../components/more-posts';
import { Navbar } from '../components/navbar';
import { SecondaryPost } from '../components/secondary-post';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfo,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';
import { DEFAULT_COVER } from '../utils/const';

const SubscribeForm = dynamic(() =>
	import('../components/subscribe-form').then((mod) => mod.SubscribeForm),
);

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialAllPosts: PostFragment[];
	initialPageInfo: PageInfo;
};

export default function Index({ publication, initialAllPosts, initialPageInfo }: Props) {
	const { language } = useAppContext(); // Use language from context
	const [filteredPosts, setFilteredPosts] = useState<PostFragment[]>([]);
	const [allPosts, setAllPosts] = useState<PostFragment[]>(initialAllPosts);
	const { t } = useTranslation('common');

	// Filter posts whenever language changes
	useEffect(() => {
		const filtered = initialAllPosts.filter((post) => {
			if (language === 'en') {
				return post.slug.endsWith('-en');
			} else {
				return !post.slug.endsWith('-en');
			}
		});
		setFilteredPosts(filtered);
	}, [language, initialAllPosts]);

	const loadMore = async () => {
		const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			MorePostsByPublicationDocument,
			{
				first: 10,
				host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
				after: initialPageInfo.endCursor,
			},
		);
		if (!data.publication) {
			return;
		}
		const newPosts = data.publication.posts.edges.map((edge) => edge.node);
		setAllPosts([...allPosts, ...newPosts]);
		// Filter the new posts as well based on current language
		const newFilteredPosts = [...allPosts, ...newPosts].filter((post) => {
			if (language === 'en') {
				return post.slug.endsWith('-en');
			} else {
				return !post.slug.endsWith('-en');
			}
		});
		setFilteredPosts(newFilteredPosts);
	};

	return (
		<Layout>
			<Head>
				<title>
					{publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
				</title>
				<meta
					name="description"
					content={
						publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
					}
				/>
				<meta property="twitter:card" content="summary_large_image" />
				<meta
					property="twitter:title"
					content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
				/>
				<meta
					property="twitter:description"
					content={
						publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
					}
				/>
				<meta
					property="og:image"
					content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
				/>
				<meta
					property="twitter:image"
					content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
				/>
				<script
					type="application/ld+json"
					dangerouslySetInnerHTML={{
						__html: JSON.stringify(addPublicationJsonLd(publication)),
					}}
				/>
			</Head>
			<Header />
			<Container className="flex flex-col items-stretch gap-10 px-5 pb-10">
				<Navbar />

				{filteredPosts.length === 0 && (
					<div className="grid grid-cols-1 py-20 lg:grid-cols-3">
						<div className="col-span-1 flex flex-col items-center gap-5 text-center text-slate-700 dark:text-neutral-400 lg:col-start-2">
							<div className="w-20">
								<ArticleSVG clasName="stroke-current" />
							</div>
							<p className="text-xl font-semibold ">
								{language === 'en'
									? 'No English articles found. Try switching to Vietnamese.'
									: 'No Vietnamese articles found. Try switching to English.'}
							</p>
						</div>
					</div>
				)}

				<div className="grid items-start gap-6 xl:grid-cols-2">
					<div className="col-span-1">
						{filteredPosts[0] && (
							<HeroPost
								title={filteredPosts[0].title}
								coverImage={filteredPosts[0].coverImage?.url || DEFAULT_COVER}
								date={filteredPosts[0].publishedAt}
								slug={filteredPosts[0].slug}
								excerpt={filteredPosts[0].brief}
							/>
						)}
					</div>
					<div className="col-span-1 flex flex-col gap-6">
						{filteredPosts.slice(1, 4).map((post) => (
							<SecondaryPost
								key={post.id}
								title={post.title}
								coverImage={post.coverImage?.url || DEFAULT_COVER}
								date={post.publishedAt}
								slug={post.slug}
								excerpt={post.brief}
							/>
						))}
					</div>
				</div>

				{filteredPosts.length > 0 && (
					<div className="bg-primary-50 grid grid-cols-4 rounded-lg px-5 py-5 dark:bg-neutral-900 md:py-10">
						<div className="col-span-full md:col-span-2 md:col-start-2">
							<h2 className="text-primary-600 dark:text-primary-500 mb-5 text-center text-lg font-semibold">
								{t('subscribe_full')}
							</h2>
							<SubscribeForm />
						</div>
					</div>
				)}

				{filteredPosts.slice(4).length > 0 && (
					<>
						<MorePosts context="home" posts={filteredPosts.slice(4)} />
						<Waypoint onEnter={loadMore} bottomOffset={'10%'} />
					</>
				)}
			</Container>
			<Footer />
		</Layout>
	);
}

export const getStaticProps: GetStaticProps<Props> = async ({ locale }) => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 10,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialAllPosts = publication.posts.edges.map((edge) => edge.node);

	return {
		props: {
			...(await serverSideTranslations(locale || 'vi')),
			publication,
			initialAllPosts,
			initialPageInfo: publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
